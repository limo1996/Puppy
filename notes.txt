
Goal

The goal of this project is to create a algorithm together with a tool which is able to create a test case 
that reaches certain basic block (location) in a program. We do not constrain ourselves to certain language 
but we assume that there exists a parser of such a language which can produce a Control Flow Graph (CFG)
that will be used for further processing. We also assume that there exists some set of testcases for a 
program or alternativelly there exists a grammar of a input file. We also assume that program takes a file
as an input. 
Result of our approach should be a valid input file which triggers code in the location specified by us. 
Our goal is not primarily find bugs in the code but rather find a ways how to trigger specific paths in
a program.

Existing approaches 

Research in the area of automatic tests generation can be divided to:
    - Fuzzing
    - Concolic testing
and
    - Black box fuzz testing
    - White box fuzz testing
    - Grey box fuzz testing

In our approach we have to use white box fuzz testing because we need to know the structure of a program 
in order to generate input that will reach certain location. In black/grey box testing it would be 
completely ineffective since randomness is not that usefull in our setting. 

Idea

Inital idea was to use SMT solver that would give us model for input variables which we constrain 
along the path we want to traverse. We would encode every condition into first order logic SMT syntax
and create one big conjuction of it. Then we would provide it to the SMT solver which will hopefully
find a model for it. If not than this block is not reachable otherwise we would need to encode
model into an input file.. 

Open Questions

How to map model to an input file? 
Do we need to know grammar of the input?
Or are few test cases sufficient?

Microsoft SAGE

White box fuzzing of binary files (Windows). Does symbolic execution together with real one. 
Tries to exploit all paths (not always feasible). By negating subset of constrains on the path.
Use heurestics since negating some conditions does not necesarilly guarantees new path.

Java PathFinder

We found an evidence : https://github.com/javapathfinder/jpf-core/wiki/Different-applications-of-JPF#explore-execution-alternatives
where they claim that they are able to create an input file that executes specified code region
(needs to be checked with the authors). Maybe to heavy to use in our approach. 



What about loops?
What if are targeted location requires single loop to be executed n-times?

What works and what not:

Soot - 